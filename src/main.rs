#![no_std]
#![no_main]

use defmt::*;
use embassy_executor::Spawner;
use embassy_stm32::{
    Peripheral, bind_interrupts,
    gpio::{Input, Level, Output, Speed},
    i2c::{
        self, Config, ErrorInterruptHandler, EventInterruptHandler, I2c, Instance, RxDma, SclPin,
        SdaPin, TxDma,
    },
    interrupt, peripherals,
    time::Hertz,
};
use embassy_time::Timer;
use embedded_graphics::{
    image::{Image, ImageRaw},
    mono_font::{MonoTextStyleBuilder, ascii::FONT_10X20},
    pixelcolor::BinaryColor,
    prelude::*,
    text::{Baseline, Text},
};
use ssd1306::{I2CDisplayInterface, Ssd1306, mode::DisplayConfig, size::DisplaySize128x64};
use {defmt_rtt as _, panic_probe as _};
bind_interrupts!(struct Irqs {
    I2C1_EV => i2c::EventInterruptHandler<peripherals::I2C1>;
    I2C1_ER => i2c::ErrorInterruptHandler<peripherals::I2C1>;
});
#[embassy_executor::main]
async fn main(_spawner: Spawner) {
    let p: embassy_stm32::Peripherals = embassy_stm32::init(Default::default());
    info!("Hello World!");
    play_with_iic(
        p.I2C1,
        p.PB6,
        p.PB7,
        Irqs,
        p.DMA1_CH6,
        p.DMA1_CH7,
        Hertz(400_000),
        Default::default(),
    )
    .await;

    let mut led = Output::new(p.PC13, Level::High, Speed::Low);

    led.set_low();

    let ipt = Input::new(p.PB13, embassy_stm32::gpio::Pull::Up);
    loop {
        if ipt.is_low() {
            info!("i am low!");
        } else {
            info!("i am high!");
        }
        Timer::after_millis(300).await;
    }
}

// #[embassy_executor::task]
// async fn ipt(gpio:Peri) {

// }

async fn play_with_iic<'d, T: Instance>(
    peri: impl Peripheral<P = T> + 'd,
    scl: impl Peripheral<P = impl SclPin<T>> + 'd,
    sda: impl Peripheral<P = impl SdaPin<T>> + 'd,
    _irq: impl interrupt::typelevel::Binding<T::EventInterrupt, EventInterruptHandler<T>>
    + interrupt::typelevel::Binding<T::ErrorInterrupt, ErrorInterruptHandler<T>>
    + 'd,
    tx_dma: impl Peripheral<P = impl TxDma<T>> + 'd,
    rx_dma: impl Peripheral<P = impl RxDma<T>> + 'd,
    freq: Hertz,
    config: Config,
) {
    let mut i2c = I2c::new(peri, scl, sda, _irq, tx_dma, rx_dma, freq, config);

    // 假设你已经构造了 embassy_stm32::i2c::I2c 实例 i2c
    let addr = 0x3C; // SSD1306 通常是 0x3C 或 0x3D
    let control_cmd = 0x00; // 控制字节：写命令
    let control_data = 0x40; // 控制字节：写数据

    // // 1️⃣ 初始化指令（简化）
    // let init_cmds: &[u8] = &[
    //     control_cmd,
    //     0xAE, // Display OFF
    //     control_cmd,
    //     0x20,
    //     0x00, // Vertical Addressing Mode
    //     control_cmd,
    //     0xAF, // Display ON
    // ];
    // i2c.blocking_write(addr, init_cmds).unwrap();

    let init_cmds = [
        control_cmd, // 控制字节，表示后面是命令
        0xAE,
        0x20,
        0x01,
        0xA1,
        0xC8,
        0x81,
        0x7F,
        0xA4,
        0xA6,
        0xD3,
        0x00,
        0xD5,
        0x80,
        0xD9,
        0xF1,
        0xDA,
        0x12,
        0xDB,
        0x40,
        0x8D,
        0x14,
        0xAF,
    ];
    i2c.blocking_write(0x3C, &init_cmds).unwrap(); // 设备地址可能是 0x3C

    // 2️⃣ 设置页/列范围（以 Vertical Mode 为例）
    let col_start = 0;
    let col_end = 127;
    let row_start = 0;
    let row_end = 7;
    let set_addr_cmds: &[u8] = &[
        control_cmd,
        0x21,
        col_start,
        col_end, // 设置列地址
        0x22,
        row_start,
        row_end, // 设置页地址
    ];
    i2c.blocking_write(addr, set_addr_cmds).unwrap();
    let mut i = 0;
    loop {
        info!("show{}", i);
        // 3️⃣ 构造正方形数据：每个字节代表一列的8个像素
        let mut buf = [0; 2];
        buf[0] = control_data; // 控制字节：数据
        i2c.blocking_write(addr, &buf).unwrap();

        if i == 255 {
            i = 0;
            continue;
        }
        i = i + 1;
        Timer::after_millis(500).await;
    }

    //     let buf = [control_data,
    //     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x1f, 0x07, 0x00, 0x00, 0x00, 0x00,
    // 0x1f, 0xff, 0x7f, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,
    // 0xff, 0x3f, 0x1f, 0x07, 0x03, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0x3f, 0x1f, 0x0f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x0f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xdf, 0xdf,
    // 0xdf, 0xdf, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3e, 0x7f, 0x3f,
    // 0x3f, 0x0f, 0x00, 0x00, 0x00, 0x40, 0xe0, 0xe0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x72,
    // 0x79, 0x7f, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x20, 0x20, 0x00, 0x03, 0xef, 0xef, 0xef,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xfb, 0xfb, 0x7b, 0xff, 0xbf, 0xbf,
    // 0xfd, 0xdf, 0x02, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    // 0x12, 0x20, 0x00, 0x20, 0x20, 0x00, 0x08, 0x08, 0x10, 0x10, 0x00, 0x10, 0x10, 0x08, 0x02, 0x00,
    // 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x12, 0x00, 0x00, 0x00, 0x80, 0xd8, 0xdf, 0xde, 0xfe,
    // 0xbe, 0xbe, 0xbe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x3b, 0xff, 0xfd, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80,
    // 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
    // 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xf8, 0xe0, 0xc2, 0x8f, 0x9f, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
    // 0x3f, 0x3f, 0x3f, 0xbf, 0xbf, 0x9f, 0x9f, 0xdf, 0xdf, 0xcf, 0xcf, 0xef, 0xc0, 0x80, 0xf0, 0xff,
    // 0xff, 0xc0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0xff, 0xff, 0xea,
    // 0x80, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    // 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff];
    //     i2c.blocking_write(addr, &buf).unwrap();
    // let interface = I2CDisplayInterface::new(i2c);

    // let mut display = Ssd1306::new(
    //     interface,
    //     DisplaySize128x64,
    //     ssd1306::prelude::DisplayRotation::Rotate0,
    // )
    // .into_buffered_graphics_mode();

    // display.init().unwrap();
    // let text_style = MonoTextStyleBuilder::new()
    //     .font(&FONT_10X20)
    //     .text_color(BinaryColor::On)
    //     .build();

    // let raw: ImageRaw<BinaryColor> = ImageRaw::new(include_bytes!("../rust.raw"), 64);

    // let r = Image::new(&raw, Point::new(32, 0));

    // let _ = Text::with_baseline("Hello world!", Point::zero(), text_style, Baseline::Top);

    // let hello_rust_embed =
    //     Text::with_baseline("Hello Embed!", Point::new(5, 35), text_style, Baseline::Top);

    // // hello_rust_embed.draw(&mut display).unwrap();
    // r.draw(&mut display).unwrap();
    // display.flush().unwrap();
}
